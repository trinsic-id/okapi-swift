// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: okapi/metadata/metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request custom metadata about the native okapi binaries - cannot get cargo env vars at runtime
public struct Okapi_Metadata_MetadataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Metadata information about the native okapi binaries. Always returns the version information
public struct Okapi_Metadata_MetadataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The full version string from okapi
  public var version: String = String()

  /// Major version
  public var versionMajor: Int32 = 0

  /// Minor version
  public var versionMinor: Int32 = 0

  /// Patch release version
  public var versionPatch: Int32 = 0

  /// https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates
  public var targetFamily: String = String()

  public var targetOs: String = String()

  public var targetArch: String = String()

  public var targetVendor: String = String()

  public var targetEnv: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "okapi.metadata"

extension Okapi_Metadata_MetadataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MetadataRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Okapi_Metadata_MetadataRequest, rhs: Okapi_Metadata_MetadataRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Okapi_Metadata_MetadataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MetadataResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "version_major"),
    3: .standard(proto: "version_minor"),
    4: .standard(proto: "version_patch"),
    10: .standard(proto: "target_family"),
    11: .standard(proto: "target_os"),
    12: .standard(proto: "target_arch"),
    13: .standard(proto: "target_vendor"),
    14: .standard(proto: "target_env"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.versionMajor) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.versionMinor) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.versionPatch) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.targetFamily) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.targetOs) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.targetArch) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.targetVendor) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.targetEnv) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if self.versionMajor != 0 {
      try visitor.visitSingularInt32Field(value: self.versionMajor, fieldNumber: 2)
    }
    if self.versionMinor != 0 {
      try visitor.visitSingularInt32Field(value: self.versionMinor, fieldNumber: 3)
    }
    if self.versionPatch != 0 {
      try visitor.visitSingularInt32Field(value: self.versionPatch, fieldNumber: 4)
    }
    if !self.targetFamily.isEmpty {
      try visitor.visitSingularStringField(value: self.targetFamily, fieldNumber: 10)
    }
    if !self.targetOs.isEmpty {
      try visitor.visitSingularStringField(value: self.targetOs, fieldNumber: 11)
    }
    if !self.targetArch.isEmpty {
      try visitor.visitSingularStringField(value: self.targetArch, fieldNumber: 12)
    }
    if !self.targetVendor.isEmpty {
      try visitor.visitSingularStringField(value: self.targetVendor, fieldNumber: 13)
    }
    if !self.targetEnv.isEmpty {
      try visitor.visitSingularStringField(value: self.targetEnv, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Okapi_Metadata_MetadataResponse, rhs: Okapi_Metadata_MetadataResponse) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.versionMajor != rhs.versionMajor {return false}
    if lhs.versionMinor != rhs.versionMinor {return false}
    if lhs.versionPatch != rhs.versionPatch {return false}
    if lhs.targetFamily != rhs.targetFamily {return false}
    if lhs.targetOs != rhs.targetOs {return false}
    if lhs.targetArch != rhs.targetArch {return false}
    if lhs.targetVendor != rhs.targetVendor {return false}
    if lhs.targetEnv != rhs.targetEnv {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
